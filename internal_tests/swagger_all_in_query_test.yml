openapi: 3.0.0
info:
  title: GEO_Test API
  description: geo_test API as RESTFul service to offer basic geo services
  version: '1.0.0'
  contact:
    email: luipir@gmail.com
  license:
    name: Creative Common CC-BY-SA
    url: 'https://creativecommons.org/licenses/by-sa/4.0/'
servers:
  - description: Simple RESTful service of geo data
    # url: https://virtserver.swaggerhub.com/luipir/geo_test/1.0.0
    url: https://localhost:8080/luipir/geo_test/1.0.0
tags:
 - name: crud
   description: Api to manage resource CRUD
 - name: search
   description: Api to manage resources search

paths:
  /areas:
    # get:
    #   tags:
    #     - search
    #   summary: Retrieve collection of Area basing on search query parameters
    #   operationId: searchAreas
    #   description: |
    #     Search for Area resources basing on query paramters
    #   parameters:
    #     # - name: name
    #     #   in: query
    #     #   description: Get all resources containing the name
    #     #   required: false
    #     #   schema:
    #     #     type: string
    #     #     example: 'look_for_this_name'
    #     # - name: date
    #     #   in: query
    #     #   description: Get all resources containing the name
    #     #   required: false
    #     #   schema:
    #     #     type: string
    #     #     pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$'
    #     #     description: Custom date 
    #     #     example: "2021-01-30"
    #     # - name: properties
    #     #   in: query
    #     #   description: Get all resources mathing property dictionary
    #     #   required: false
    #     #   schema:
    #     #     $ref: '#/components/schemas/Props'
    #     - name: intersect
    #       in: query
    #       description: Get all resources intersecting query Area and ordered from larget to smallest
    #       required: false
    #       schema:
    #         $ref: '#/components/schemas/Polygon'
    #     # - name: intersection
    #     #   in: query
    #     #   description: Get all resources intersection with query Area. No order is espected
    #     #   required: false
    #     #   allowEmptyValue: true
    #     #   schema:
    #     #     $ref: '#/components/schemas/Polygon'
    #   responses:
    #     '200':
    #       description: search results matching query
    #       content:
    #         application/json:
    #           schema:
    #             type: array
    #             items:
    #               $ref: '#/components/schemas/Area'
    #     '400':
    #       description: bad input parameter
    #     '404':
    #       description: No resources found
    post:
      tags:
        - crud
      summary: Add new/modify Area resource
      operationId: addArea
      description: |
        Add a new Area resource or modify existing if unique name already exist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Area'
        description: Area resource to add/substitute
      responses:
        '204':
          description: The resource was created/substited successfully.

  /areas/{name}:
    parameters:
      - name: name
        in: path
        description: resource unique name
        required: true
        schema:
          type: string
    get:
      tags:
        - crud
      summary: Retrieve a Area resource by unique name.
      operationId: getAreaByName
      description: |
        Retrieve a Area resource by unique name.
      responses:
        '200':
          description: search result by unique name.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'
                maxItems: 1
        '400':
          description: bad input parameter
        '404':
          description: No resource found
    delete:
      tags:
        - search
      summary: Delete a Area resource by name.
      operationId: deleteAreByName
      description: |
        Delete a Area resource by name.
      responses:
        '204':
          description: The resource was deleted successfully.
        '400':
          description: bad input parameter
        '404':
          description: No resource found

  /areas/{date}:
    parameters:
    - name: date
      in: path
      description: Get all resources containing the name
      required: true
      schema:
        type: string
        pattern: '^\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$'
        description: Custom date 
        example: "2021-01-30"
    get:
      tags:
        - crud
      summary: Retrieve a Area with a specified data.
      operationId: getAreaByDate
      description: |
        Retrieve a Area resource by date.
      responses:
        '200':
          description: search result by unique name.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'
        '400':
          description: bad input parameter
        '404':
          description: No resource found

  /areas/properties:
    post:
      tags:
        - crud
      summary: Retrieve a Area with a specified data set of properties.
      operationId: getAreaByProperties
      description: |
        Retrieve a Area resource by properties dict.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Props'
        description: Area to retrieve with matching properties
      responses:
        '200':
          description: search result by properties
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'
        '400':
          description: bad input parameter
        '404':
          description: No resource found

  /areas/intersect:
    post:
      tags:
        - crud
      summary: Retrieve a Area inteersecting posted GeoJSON polygon.
      operationId: getIntersected
      description: |
        Retrieve intersecting Area resources 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Polygon'
        description: Polygon to retrieve intersecting Area resources
      responses:
        '200':
          description: search result by intersection
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'
        '400':
          description: bad input parameter
        '404':
          description: No resource found

  /areas/intersection:
    post:
      tags:
        - crud
      summary: Retrieve Area inside input GeoJSON polygon.
      operationId: getIntersection
      description: |
        Retrieve Area inside input GeoJSON polygon
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Polygon'
        description: Polygon to retrieve inner Area resources
      responses:
        '200':
          description: search result by intersection
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'
        '400':
          description: bad input parameter
        '404':
          description: No resource found


components:
  schemas:

    Props:
      type: object
      properties:
        string_value:
          type: string
        integer_value:
          type: number
      example:
        a_string_value: Hello!
        an_number_value: 1111.222

    Area:
      type: object
      required:
        - name
        - date
        - properties
        - area
      properties:
        name:
          type: string
          example: Luigi Pirelli
        date:
          type: string
          format: date
          example: '2021-04-17'
        properties:
          $ref: '#/components/schemas/Props'
        area:
          $ref: '#/components/schemas/Polygon'


#*****************************************
    #---------------------------------------------------------------------------
    'GeoJsonObject':
      description: >
        GeoJSon object

        The coordinate reference system for all GeoJSON coordinates is a
        geographic coordinate reference system, using the World Geodetic System
        1984 (WGS 84) datum, with longitude and latitude units of decimal
        degrees.
        This is equivalent to the coordinate reference system identified by the
        Open Geospatial Consortium (OGC) URN
        An OPTIONAL third-position element SHALL be the height in meters above
        or below the WGS 84 reference ellipsoid.
        In the absence of elevation values, applications sensitive to height or
        depth SHOULD interpret positions as being at local ground or sea level.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3'
      type: object
      properties:
        'type':
          type: string
          enum:
          - Feature
          # - FeatureCollection
          - Point
          - MultiPoint
          - LineString
          - MultiLineString
          - Polygon
          - MultiPolygon
          - GeometryCollection
        'bbox':
          description: >
            A GeoJSON object MAY have a member named "bbox" to include
            information on the coordinate range for its Geometries, Features, or
            FeatureCollections. The value of the bbox member MUST be an array of
            length 2*n where n is the number of dimensions represented in the
            contained geometries, with all axes of the most southwesterly point
            followed by all axes of the more northeasterly point. The axes order
            of a bbox follows the axes order of geometries.
          type: array
          items:
            type: number
      required:
      - type
      discriminator:  
        propertyName: type

    #---------------------------------------------------------------------------
    'Geometry':
      description: >
        Abstract type for all GeoJSon object except Feature and
        FeatureCollection
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3'
      allOf:
      - $ref: '#/components/schemas/GeoJsonObject'
      - type: object
        properties:
          'type':
            type: string
            enum:
            - Point
            - MultiPoint
            - LineString
            - MultiLineString
            - Polygon
            - MultiPolygon
            - GeometryCollection
        required:
        - type
        discriminator:
          propertyName: type

    #---------------------------------------------------------------------------
    'GeometryElement':
      description: >
        Abstract type for all GeoJSon 'Geometry' object the type of which is not
        'GeometryCollection'
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3'
      allOf:
      - $ref: '#/components/schemas/Geometry'
      - type: object
        properties:
          'type':
            type: string
            enum:
            - Point
            - MultiPoint
            - LineString
            - MultiLineString
            - Polygon
            - MultiPolygon
        required:
        - type
        discriminator:
          propertyName: type

    #---------------------------------------------------------------------------
    # 'Feature':
    #   description: GeoJSon 'Feature' object
    #   externalDocs:
    #     url: 'https://tools.ietf.org/html/rfc7946#section-3.2'
    #   allOf:
    #   - $ref: '#/components/schemas/GeoJsonObject'
    #   - type: object
    #     required:
    #     - geometry
    #     - properties
    #     properties:
    #       'geometry':
    #         allOf:
    #         - nullable: true
    #         - $ref: '#/components/schemas/Geometry'
    #       'properties':
    #         type: object
    #         nullable: true
    #       'id':
    #         oneOf:
    #         - type: number
    #         - type: string

    # #---------------------------------------------------------------------------
    # 'FeatureCollection':
    #   description: GeoJSon 'FeatureCollection' object
    #   externalDocs:
    #     url: 'https://tools.ietf.org/html/rfc7946#section-3.3'
    #   allOf:
    #   - $ref: '#/components/schemas/GeoJsonObject'
    #   - type: object
    #     required:
    #     - features
    #     properties:
    #       'features':
    #         type: array
    #         items:
    #           $ref: '#/components/schemas/Feature'

    #---------------------------------------------------------------------------
    'Position':
      description: >
        GeoJSon fundamental geometry construct.

        A position is an array of numbers. There MUST be two or more elements.
        The first two elements are longitude and latitude, or easting and
        northing, precisely in that order and using decimal numbers.
        Altitude or elevation MAY be included as an optional third element.

        Implementations SHOULD NOT extend positions beyond three elements
        because the semantics of extra elements are unspecified and ambiguous.
        Historically, some implementations have used a fourth element to carry
        a linear referencing measure (sometimes denoted as "M") or a numerical
        timestamp, but in most situations a parser will not be able to properly
        interpret these values. The interpretation and meaning of additional
        elements is beyond the scope of this specification, and additional
        elements MAY be ignored by parsers.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.1'
      type: array
      minItems: 2
      maxItems: 3
      items:
        type: number

    #---------------------------------------------------------------------------
    'LineStringCoordinates':
      description: >
        GeoJSon fundamental geometry construct, array of two or more positions.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.4'
      type: array
      items:
        $ref: '#/components/schemas/Position'
      minItems: 2

    #---------------------------------------------------------------------------
    'LinearRing':
      description: >
        A linear ring is a closed LineString with four or more positions.

        The first and last positions are equivalent, and they MUST contain
        identical values; their representation SHOULD also be identical.

        A linear ring is the boundary of a surface or the boundary of a hole in
        a surface.

        A linear ring MUST follow the right-hand rule with respect to the area
        it bounds, i.e., exterior rings are counterclockwise, and holes are
        clockwise.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.6'
      type: array
      items:
        $ref: '#/components/schemas/Position'
      minItems: 4

    #---------------------------------------------------------------------------
    'Point':
      description: GeoJSon geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.2'
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
          - type
          - coordinates
          properties:
            'type':
              type: 'string'
              enum: [Point]
            'coordinates':
              $ref: '#/components/schemas/Position'

    #---------------------------------------------------------------------------
    'MultiPoint':
      description: GeoJSon geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.3'
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
          - coordinates
          properties:
            'coordinates':
              type: array
              items:
                $ref: '#/components/schemas/Position'

    #---------------------------------------------------------------------------
    'LineString':
      description: GeoJSon geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.4'
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
          - coordinates
          properties:
            'coordinates':
              $ref: '#/components/schemas/LineStringCoordinates'

    #---------------------------------------------------------------------------
    'MultiLineString':
      description: GeoJSon geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.5'
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
          - coordinates
          properties:
            'coordinates':
              type: array
              items:
                $ref: '#/components/schemas/LineStringCoordinates'

    #---------------------------------------------------------------------------
    'Polygon':
      description: GeoJSon geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.6'
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
          - coordinates
          properties:
            'coordinates':
              type: array
              items:
                $ref: '#/components/schemas/LinearRing'

    #---------------------------------------------------------------------------
    'MultiPolygon':
      description: GeoJSon geometry
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.7'
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
          - coordinates
          properties:
            'coordinates':
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/LinearRing'

    #---------------------------------------------------------------------------
    'GeometryCollection':
      type: object
      description: >
        GeoJSon geometry collection

        GeometryCollections composed of a single part or a number of parts of a
        single type SHOULD be avoided when that single part or a single object
        of multipart type (MultiPoint, MultiLineString, or MultiPolygon) could
        be used instead.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946#section-3.1.8'
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          required:
          - geometries
          properties:
            'geometries':
              type: array
              items:
                $ref: '#/components/schemas/GeometryElement'
              minItems: 0



    # Point3D:
    #   type: array
    #   description: Point in 3D space
    #   # externalDocs:
    #   #   url: http://geojson.org/geojson-spec.html#id2
    #   minItems: 2
    #   maxItems: 3
    #   items:
    #     type: number

    # Point:
    #   type: object
    #   properties:
    #     longitude:
    #       type: number
    #       format: double
    #       example: -8.226312
    #     latitude:
    #       type: number
    #       format: double
    #       example: 43.297020
    #     height:
    #       type: number
    #       format: double
    #       example: 77
    #   description: >-
    #     WGS-84 longitude-latitude and height above sea-level

    # Polygon:
    #   type: object
    #   description: GeoJSon geometry
    #   # externalDocs:
    #   #   url: http://geojson.org/geojson-spec.html#id4
    #   # allOf:
    #   #   - $ref: "#/definitions/Geometry"
    #   properties:
    #     coordinates:
    #       type: array
    #       items:
    #         type: array
    #         items:
    #           $ref: '#/components/schemas/Point3D'
    #         minItems: 3
    # Polygon:
    #   # type: object
    #   description: >-
    #     A list of points representing a closed shape . the First point is
    #     connected to the last to close the shape. a shape must contain at least
    #     three points.
    #   type: array
    #   items:
    #     $ref: '#/components/schemas/Point'
    #   minItems: 3