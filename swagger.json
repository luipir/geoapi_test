{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "GEO_Test API",
    "description" : "geo_test API as RESTFul service to offer basic geo services",
    "version" : "1.0.0",
    "contact" : {
      "email" : "luipir@gmail.com"
    },
    "license" : {
      "name" : "Creative Common CC-BY-SA",
      "url" : "https://creativecommons.org/licenses/by-sa/4.0/"
    }
  },
  "servers" : [ {
    "description" : "Simple RESTful service of geo data",
    "url" : "https://virtserver.swaggerhub.com/luipir/geo_test/1.0.0"
  } ],
  "tags" : [ {
    "name" : "crud",
    "description" : "Api to manage resource CRUD"
  }, {
    "name" : "search",
    "description" : "Api to manage resources search"
  } ],
  "paths" : {
    "/areas" : {
      "get" : {
        "tags" : [ "search" ],
        "summary" : "Retrieve collection of Area basing on search query parameters",
        "operationId" : "searchAreas",
        "description" : "Search for Area resources basing on query paramters\n",
        "parameters" : [ {
          "name" : "name",
          "in" : "query",
          "description" : "Get all resources containing the name",
          "required" : false,
          "schema" : {
            "type" : "string",
            "example" : "look_for_this_name"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "Get all resources containing the name",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date",
            "example" : "2021-04-17"
          }
        }, {
          "name" : "properties",
          "in" : "query",
          "description" : "Get all resources mathing property dictionary",
          "required" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : true,
            "example" : {
              "en" : "Hello!",
              "fr" : "Bonjour!"
            }
          }
        }, {
          "name" : "intersect",
          "in" : "query",
          "description" : "Get all resources intersecting query Area and ordered from larget to smallest",
          "required" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Area"
            }
          }
        }, {
          "name" : "intersection",
          "in" : "query",
          "description" : "Get all resources intersection with query Area. No order is espected",
          "required" : false,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/Area"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "search results matching query",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Area"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "404" : {
            "description" : "No resources found"
          }
        }
      },
      "post" : {
        "tags" : [ "crud" ],
        "summary" : "Add new/modify Area resource",
        "operationId" : "addArea",
        "description" : "Add a new Area resource or modify existing if unique name already exist\n",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Area"
              }
            }
          },
          "description" : "Area resource to add/substitute"
        },
        "responses" : {
          "204" : {
            "description" : "The resource was created/substited successfully."
          }
        }
      }
    },
    "/areas/{name}" : {
      "parameters" : [ {
        "name" : "name",
        "in" : "path",
        "description" : "resource unique name",
        "required" : true,
        "schema" : {
          "type" : "string"
        }
      } ],
      "get" : {
        "tags" : [ "crud" ],
        "summary" : "Retrieve a Area resource by unique name.",
        "operationId" : "getAreaByName",
        "description" : "Retrieve a Area resource by unique name.\n",
        "responses" : {
          "200" : {
            "description" : "search result by unique name.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Area"
                  },
                  "maxItems" : 1
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "404" : {
            "description" : "No resource found"
          }
        }
      },
      "delete" : {
        "tags" : [ "search" ],
        "summary" : "Delete a Area resource by name.",
        "operationId" : "deleteAreByName",
        "description" : "Delete a Area resource by name.\n",
        "responses" : {
          "204" : {
            "description" : "The resource was deleted successfully."
          },
          "400" : {
            "description" : "bad input parameter"
          },
          "404" : {
            "description" : "No resource found"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Area" : {
        "type" : "object",
        "required" : [ "name", "date", "properties", "area" ],
        "properties" : {
          "name" : {
            "type" : "string",
            "example" : "Luigi Pirelli"
          },
          "date" : {
            "type" : "string",
            "format" : "date",
            "example" : "2021-04-17"
          },
          "properties" : {
            "type" : "object",
            "additionalProperties" : true,
            "example" : {
              "en" : "Hello!",
              "fr" : "Bonjour!"
            }
          },
          "area" : {
            "$ref" : "#/components/schemas/Polygon"
          }
        }
      },
      "Point" : {
        "type" : "object",
        "properties" : {
          "longitude" : {
            "type" : "number",
            "format" : "double",
            "example" : -8.226312
          },
          "latitude" : {
            "type" : "number",
            "format" : "double",
            "example" : 43.29702
          },
          "height" : {
            "type" : "number",
            "format" : "double",
            "example" : 77
          }
        },
        "description" : "WGS-84 longitude-latitude and height above sea-level"
      },
      "Polygon" : {
        "description" : "A list of points representing a closed shape . the First point is connected to the last to close the shape. a shape must contain at least three points.",
        "type" : "object",
        "properties" : {
          "points" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Point"
            },
            "minItems" : 3
          }
        }
      }
    }
  }
}