# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Point3DDict(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lat=None, lon=None, altitude=None):  # noqa: E501
        """Point3DDict - a model defined in OpenAPI

        :param lat: The lat of this Point3DDict.  # noqa: E501
        :type lat: float
        :param lon: The lon of this Point3DDict.  # noqa: E501
        :type lon: float
        :param altitude: The altitude of this Point3DDict.  # noqa: E501
        :type altitude: float
        """
        self.openapi_types = {
            'lat': float,
            'lon': float,
            'altitude': float
        }

        self.attribute_map = {
            'lat': 'lat',
            'lon': 'lon',
            'altitude': 'altitude'
        }

        self._lat = lat
        self._lon = lon
        self._altitude = altitude

    @classmethod
    def from_dict(cls, dikt) -> 'Point3DDict':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Point3DDict of this Point3DDict.  # noqa: E501
        :rtype: Point3DDict
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lat(self):
        """Gets the lat of this Point3DDict.


        :return: The lat of this Point3DDict.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Point3DDict.


        :param lat: The lat of this Point3DDict.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this Point3DDict.


        :return: The lon of this Point3DDict.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Point3DDict.


        :param lon: The lon of this Point3DDict.
        :type lon: float
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")  # noqa: E501

        self._lon = lon

    @property
    def altitude(self):
        """Gets the altitude of this Point3DDict.


        :return: The altitude of this Point3DDict.
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this Point3DDict.


        :param altitude: The altitude of this Point3DDict.
        :type altitude: float
        """

        self._altitude = altitude
