# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.props import Props
from openapi_server import util

from openapi_server.models.props import Props  # noqa: E501

class Area(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, date=None, properties=None, area=None):  # noqa: E501
        """Area - a model defined in OpenAPI

        :param name: The name of this Area.  # noqa: E501
        :type name: str
        :param date: The date of this Area.  # noqa: E501
        :type date: date
        :param properties: The properties of this Area.  # noqa: E501
        :type properties: Props
        :param area: The area of this Area.  # noqa: E501
        :type area: List[List]
        """
        self.openapi_types = {
            'name': str,
            'date': date,
            'properties': Props,
            'area': List[List]
        }

        self.attribute_map = {
            'name': 'name',
            'date': 'date',
            'properties': 'properties',
            'area': 'area'
        }

        self._name = name
        self._date = date
        self._properties = properties
        self._area = area

    @classmethod
    def from_dict(cls, dikt) -> 'Area':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Area of this Area.  # noqa: E501
        :rtype: Area
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Area.


        :return: The name of this Area.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Area.


        :param name: The name of this Area.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def date(self):
        """Gets the date of this Area.


        :return: The date of this Area.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Area.


        :param date: The date of this Area.
        :type date: date
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def properties(self):
        """Gets the properties of this Area.


        :return: The properties of this Area.
        :rtype: Props
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Area.


        :param properties: The properties of this Area.
        :type properties: Props
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def area(self):
        """Gets the area of this Area.

        Polygon not closed coordinates.  # noqa: E501

        :return: The area of this Area.
        :rtype: List[List]
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Area.

        Polygon not closed coordinates.  # noqa: E501

        :param area: The area of this Area.
        :type area: List[List]
        """
        if area is None:
            raise ValueError("Invalid value for `area`, must not be `None`")  # noqa: E501
        if area is not None and len(area) < 3:
            raise ValueError("Invalid value for `area`, number of items must be greater than or equal to `3`")  # noqa: E501

        self._area = area
